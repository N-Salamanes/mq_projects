/*
	Author: Nigel Salamanes, October 2016
	Student ID: 43690599
	Description: COMP202 - Assignment 3
	File Description: contains debug functions
*/


// user defined headers
#include "debug.h"


// main debug print function
void printDebug(FILE *pInFile){
	// ensures that "Commands:" is only printed once per rule
	int iCommandControl = 0;
	// this will control how to process the line
	int iLineControl = -1;
	// how many rules have been processed
	int rule_count = 1;
	// if commands were the last thing that was printed, need this for formatting
	int startNewRule = NO;
	// see if we have a rule before commands
	int rulesBeforeCommand = NO;
	// counts how many lines have been processed
	int line_count = 1;
	
	// do an infinite loop until EOF is reached
	while (INFINITE_LOOP){
		
		// get and test the next character
		int nextChar = fgetc(pInFile);
		
		// check and see if the next character was successful or if the EOF was reached
		if(nextChar != EOF){
			// NOT! THE END OF FILE!
			// put the retrieved character back into the stream

			// set the line control switch
			if (isalpha(nextChar)){
				// first character is alpha-numeric, it must be a rule
				iLineControl = RULE_HEADER;
				
				// set the CommandControl to 0 so that "Commands:" is printed out again
				iCommandControl = 0;
				
				// we have a rule so commands may follow
				rulesBeforeCommand = YES;
			}
			else if ((nextChar == '\t') || (nextChar == ' ')){
				iLineControl = COMMAND_LINES;
				
				// remove white space characters
				while((nextChar == '\t') || (nextChar == ' ')){
					nextChar = fgetc(pInFile);
				}
				
				// set iLineControl accordingly depending on what is after these white spaces
				if (nextChar == '#'){
					// detect if white space is preceeded by a comment tag '#'
					iLineControl = COMMENTS;
				}
				if (nextChar == '\n'){
					// detect if white space is preceeded by a comment tag '#'
					iLineControl = NEW_LINE;
				}
			}
			else if (nextChar == '\n'){
				// if its a new line char, skip it
				iLineControl = NEW_LINE;
			}
			else if (nextChar == '#'){
				// its a comment
				iLineControl = COMMENTS;
			}
			else{
				// it should never reach here though!!!
				iCommandControl = -1;
			}
			
			// put back the last character
			ungetc(nextChar, pInFile);
		} 
		else {
			//END OF FILE!
			//quit the loop
			break;
		}
		
		// now lets analyse and break down the file line by line
		
		// the line read (stored) and required variables
		char *line = NULL;
		size_t length = 0;
		ssize_t read;
		
		if (read = getline(&line, &length, pInFile) != -1){
			
			// switch depending on the first character of the line
			switch(iLineControl){
				// its a rule, target/dependencies
				case RULE_HEADER:
					// check: The dmake file has a syntax error - no colon in the dependency line.
					if (validRules(line, line_count) == NO){
						exit(1);
					}
				
					if (startNewRule == YES){
						printf("\nRule %i:\n", rule_count);
						startNewRule = NO;
					}
					else{
						printf("Rule %i:\n", rule_count);
					}
					
					// print rules, (TARGET/DEPENDENCIES)
					printRules(line);
					rule_count++;
					
					// after printing rules, switch back to yes for proper formatting
					startNewRule = YES;
					
					break;
				// its a command line(s)
				case COMMAND_LINES:
					// check: The dmake file has a syntax error - command without rule header line
					if (rulesBeforeCommand == NO){
						notValidCommands(line, line_count);
						exit(1);
					}
				
					// prints "Commands" if appropriate
					if (iCommandControl == NO){
						printf("Commands:\n");
					}
					iCommandControl = YES;
					
					// print command(s)
					printCommands(line);
					
					
					break;
				case COMMENTS:
					// do nothing, skip this read line from the stream
					break;
				case NEW_LINE:
					// do nothing, skip this read line from the stream
					break;
				default:
					printf("ERROR! Invalid iLineControl. Exiting.\n");
					exit(1);
			}
		}
		
		line_count++;
	}
	
	
	// for formatting so we're on a new line
	if (startNewRule == YES){
		printf("\n");
	}
	
	//close the file
	fclose(pInFile);
}


// print commands
void printCommands(char *line){
	printf("    %s", line);
}


// print rules, Target and Dependencies
void printRules(char *line){
	
	// duplicate line* so that we dont modify the original
	char *new_line;
	new_line = strdup(line);
	
	// things to look for to break up the string
	const char delimiters[] = " :";
	
	//extracted bits
	char *token;
	
	// these control whether targets/dependencies have been run at least once
	int targetControl = NO;
	int dependenciesControl = NO;
	
	while(token){
		// get the next token
		token = strsep(&new_line, delimiters);
		
		// if token is not null AND token's first character is a printable character
		if ((token != NULL) && (isprint(token[0]))){
			
			if (targetControl == NO){
				// its the TARGET
				printf("    Targets:      ");
				printf("%s\n", token);
				targetControl = YES;
				
				printf("    Dependencies: ");
			}
			else{
				// its the dependencies
				if (dependenciesControl == NO){
					
					printf("%s", token);
					dependenciesControl = YES;
				}
				else{
					// multiple dependencies, format accordingly
					printf(", %s", token);
				}
			}
		}
	}
	
	if ((targetControl == YES) && (dependenciesControl == NO)){
		// that means there is a target listed but no dependencies
		printf("\n");
	}
}


int validRules(char *line, int count){
	int i;
	
	// go through the string and check if it contains a colon
	for (i = 0; i < strlen(line); i++){
		if (line[i] == ':'){
			return YES;
		}
	}
	
	// if it gets here that means its not a valid rule
	
	// int count converted to a string
	char *strCount;
	// the size of the strCount
	int countLength = 0;
	// allocate string size
	strCount = (char*)malloc(countLength);
	
	// allocate more memory as needed
	while (countLength <= 0){		
		
		countLength++;
		strCount = (char*) realloc(strCount, countLength);
		
		// try converting the int to string
		countLength = sprintf(strCount, "%i", count);
	}
	
	// things to print
	
	// error message to print out
	char *errMsg;
	char *errMsgTemplate = "Syntax error at line : Expected colon separator in rule header:\n";
	
	// allocate the size of the error messsage
	errMsg = (char*)malloc(strlen(errMsgTemplate) + countLength);
	
	// store the error message
	sprintf(errMsg, "Syntax error at line %i: Expected colon separator in rule header:\n", count);
	
	// print the error output to stderr
	fprintf(stderr, errMsg);
	fprintf(stderr, line);
	
	return NO;
}


int notValidCommands(char * line, int count){
	
	// int count converted to a string
	char *strCount;
	// the size of the strCount
	int countLength = 0;
	// allocate string size
	strCount = (char*)malloc(countLength);
	
	// allocate more memory as needed
	while (countLength <= 0){		
		
		countLength++;
		strCount = (char*) realloc(strCount, countLength);
		
		// try converting the int to string
		countLength = sprintf(strCount, "%i", count);
	}
	
	// things to print
	
	// the error message
	char *errMsg;
	char *errMsgTemplate = "Syntax error at line : Unexpected command without rule header:\n";
	
	// allocate the size of the error message
	errMsg = (char*)malloc(strlen(errMsgTemplate) + countLength);
	// store the error message
	sprintf(errMsg, "Syntax error at line %i: Unexpected command without rule header:\n", count);
	// print the error message
	fprintf(stderr, errMsg);
	
	// the line message
	char lineMsg[strlen(line)];	
	
	// format and print the incorrect line message
	sprintf(lineMsg, "	%s", line);
	fprintf(stderr, lineMsg);
	
	return NO;
}
